{
  "version": 3,
  "sources": ["../../lib/components/Text.tsx"],
  "sourcesContent": ["import React from \"react\";\nimport LayoutPlatform, { LayoutPlatforms } from \"../helpers/LayoutPlatform.js\";\nimport TextWeb from \"./web/TextWeb.js\";\nimport TextNative from \"./native/TextNative.js\";\n\nexport const Text = (p: TextProps) => {\n  if (LayoutPlatform.OS === LayoutPlatforms.WEB) {\n    return TextWeb(p);\n  }\n\n  if (LayoutPlatform.OS === LayoutPlatforms.NATIVE) {\n    return TextNative(p);\n  }\n\n  console.warn(\"Text component is not supported for this platform.\");\n  return null;\n};\n\nexport default Text;\n\nexport type TextGenericProps = {\n  children?: JSX.Element | JSX.Element[];\n  native?: {\n    [key: string]: unknown;\n  };\n  element?: string;\n  id?: string;\n  target?: string;\n  to?: string;\n};\n\nexport type TextStyleProps = {\n  top?: number | string;\n  left?: number | string;\n  bottom?: number | string;\n  right?: number | string;\n  flex?: number | string;\n  align?:\n    | \"flex-start\"\n    | \"flex-end\"\n    | \"center\"\n    | \"baseline\"\n    | \"stretch\"\n    | \"unset\"\n    | \"initial\"\n    | \"inherit\"\n    | \"none\"\n    | \"auto\";\n  justify?:\n    | \"flex-start\"\n    | \"flex-end\"\n    | \"center\"\n    | \"space-between\"\n    | \"space-around\"\n    | \"unset\"\n    | \"initial\"\n    | \"inherit\"\n    | \"none\"\n    | \"auto\";\n  direction?:\n    | \"row\"\n    | \"column\"\n    | \"row-reverse\"\n    | \"column-reverse\"\n    | \"unset\"\n    | \"initial\"\n    | \"inherit\"\n    | \"none\"\n    | \"auto\";\n  space?: \"normal\" | \"nowrap\" | \"pre\" | \"pre-line\" | \"pre-wrap\";\n  family?: string;\n  color?: string;\n  height?: number | string;\n  width?: number | string;\n  opacity?: number;\n  padding?: number | string;\n  margin?: number | string;\n  position?:\n    | \"absolute\"\n    | \"relative\"\n    | \"fixed\"\n    | \"sticky\"\n    | \"unset\"\n    | \"initial\"\n    | \"inherit\"\n    | \"none\"\n    | \"auto\";\n  overflow?:\n    | \"visible\"\n    | \"hidden\"\n    | \"scroll\"\n    | \"unset\"\n    | \"initial\"\n    | \"inherit\"\n    | \"none\"\n    | \"auto\";\n  display?:\n    | \"inline\"\n    | \"block\"\n    | \"inline-block\"\n    | \"flex\"\n    | \"unset\"\n    | \"initial\"\n    | \"inherit\"\n    | \"none\"\n    | \"auto\";\n  layer?: number;\n  mode?: \"margin\" | \"padding\" | \"position\";\n  style?: {\n    [key: string]: unknown;\n  };\n};\n\nexport type TextProps = {\n  parse?: string;\n  css?: string;\n  reference?: React.Ref<HTMLSpanElement>;\n  press?: () => unknown;\n  pure?: boolean;\n} & TextGenericProps &\n  TextStyleProps;\n"],
  "mappings": "AACA,OAAO,kBAAkB,uBAAuB;AAChD,OAAO,aAAa;AACpB,OAAO,gBAAgB;AAEhB,MAAM,OAAO,CAAC,MAAiB;AACpC,MAAI,eAAe,OAAO,gBAAgB,KAAK;AAC7C,WAAO,QAAQ,CAAC;AAAA,EAClB;AAEA,MAAI,eAAe,OAAO,gBAAgB,QAAQ;AAChD,WAAO,WAAW,CAAC;AAAA,EACrB;AAEA,UAAQ,KAAK,oDAAoD;AACjE,SAAO;AACT;AAEA,IAAO,eAAQ;",
  "names": []
}
